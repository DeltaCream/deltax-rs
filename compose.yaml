# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# services:
#   server:
#     build:
#       context: .
#       target: final
#       args:
#         APP_NAME: ${APP_NAME}
#         APP_VERSION: ${APP_VERSION} # to be modified in a future version
#     image: deltax
#     ports:
#       - 8080:8080
#     volumes:
#       - .:/usr/src/app
#     # working_dir: /usr/src/app
#     command: ["cargo", "run"]
#     develop:
#       watch:
#         - action: sync
#           path: .

services:
    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: rust-backend
        ports:
            - "8080:8080"
            # - DATABASE_URL=postgres://postgres:password@db:5432/mydatabase
        environment:
            - RUST_BACKTRACE=1
        develop:
            watch:
                - action: sync+restart
                  path: ./backend
                  target: /app

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile.frontend
        container_name: nextjs-frontend
        ports:
            - "3000:3000"
        environment:
        - NODE_ENV=development
        - WATCHPACK_POLLING=true
        volumes:
            - ./frontend:/app
            - /app/node_modules
        command: ["npm", "run", "dev"]
        depends_on:
            - backend

#     db:
#         image: postgres:15
#         container_name: postgres-db
#         restart: always
#         environment:
#             POSTGRES_USER: postgres
#             POSTGRES_PASSWORD: password
#             POSTGRES_DB: mydatabase
#         ports:
#             - "5432:5432"
#         volumes:
#             - db-data:/var/lib/postgresql/data

# volumes:
#   db-data:

# services:
#   app:
#     build:
#       context: .
#     container_name: "deltax"
#     volumes:
#       - .:/app
#     ports:
#       - "8080:8080"
#     environment:
#       - RUST_BACKTRACE=1
#     # command: sh -c "cargo watch -x run"
#     command: [cargo, watch, -x, run]

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

