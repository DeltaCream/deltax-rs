# Use the official Node.js image as the base
FROM node:23-alpine AS builder

ENV PNPM_HOME="/pnpm" \
    PATH="$PNPM_HOME:$PATH"
RUN corepack enable
# Set the working directory inside the container
WORKDIR /app

# Copy package.json and pnpm-lock.yaml for dependency installation (and .npmrc)
COPY package.json pnpm-lock.yaml .npmrc ./

# Install necessary build tools (system dependencies)
RUN apk add --no-cache libc6-compat && pnpm install --frozen-lockfile

# Copy the rest of the application code
COPY . .

# Build the Next.js application (use next dev build for production)
RUN pnpm build

# Use a minimal base image for the final artifact (should match with the base image used in the builder stage)
FROM node:23-alpine AS runtime

# Set up PNPM again for runtime
ENV PNPM_HOME="/pnpm" \
    PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Set the working directory inside the container
WORKDIR /app

# Copy the built application from the builder stage
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./

# Expose the port the application runs on
EXPOSE 3000

# Set the command to run the application
CMD ["pnpm", "dev"]